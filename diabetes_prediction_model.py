# -*- coding: utf-8 -*-
"""Diabetes Prediction model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Fu2NbkVaJk2M3selia9Zrt2ae9NCiXy

# Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import svm

"""# Data collection and Analysis"""

# loading the diabetes dataset to Pandas dataframe

diabetes_dataset=pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of dataset
diabetes_dataset.head()

# number of rows and columns in this dataset
diabetes_dataset.shape

# getting the statistical measures of data

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

# Seperating data and labels

X=diabetes_dataset.drop(columns='Outcome', axis=1)
Y=diabetes_dataset['Outcome']

"""# Data Standardization"""

# It is import to convert values into a common range so that model can make accurate predictions

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

X=standardized_data
Y=diabetes_dataset['Outcome']

"""# Splitting data into training data and test data

"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# Training the Model"""

classifier=svm.SVC(kernel='linear')

# training the support vector machine classifer 

classifier.fit(X_train, Y_train)

"""# Model Evaluation

## Accuracy score
"""

# accuracy score on training data

X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)


print("Accuracy of the training data:",training_data_accuracy)

# Accuracy score of test data

X_test_prediction=classifier.predict(X_test)
testing_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy of testing data:", testing_data_accuracy)

"""## Making a predictive system"""

input_data=(4,110,92,0,0,37.6,0.191,30)

# changing the input_data to numpy array

input_data_as_numpy_array=np.asarray(input_data)

# reshape the array as we are predicting for one instance

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data=scaler.transform(input_data_reshaped)


prediction=classifier.predict(std_data)


if prediction[0]==0:
  print("Person is non diabetic")
else:
  print("Person is diabetic")